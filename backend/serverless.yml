# TODO: Change the name of the org 
org: neonagx
app: serverless-woofer-app
service: serverless-woofer-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    WOOFER_TABLE: woofer-${self:provider.stage}
    WOOFER_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: pbaik-woofer-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function - 
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetWoofers:
    handler: src/lambda/http/getWoofers.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WOOFER_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WOOFER_TABLE}/index/${self:provider.environment.WOOFER_CREATED_AT_INDEX}
    events:
      - http:
          method: get
          path: woofers
          cors: true
          authorizer: Auth

  # TODO: Configure this function - 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateWoofer:
    handler: src/lambda/http/createWoofer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WOOFER_TABLE}
    events:
      - http:
          method: post
          path: woofers
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(src/models/create-woofer.json)}
                  
  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateWoofer:
    handler: src/lambda/http/updateWoofer.handler
    iamRoleStatements: 
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WOOFER_TABLE}
    events:
      - http:
          method: patch
          path: woofers/{wooferId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(src/models/update-woofer.json)}

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteWoofer:
    handler: src/lambda/http/deleteWoofer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WOOFER_TABLE}
    events:
      - http:
          method: delete
          path: woofers/{wooferId}
          cors: true
          authorizer: Auth

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WOOFER_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WOOFER_TABLE}/index/${self:provider.environment.WOOFER_CREATED_AT_INDEX}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
    events:
      - http:
          method: post
          path: woofers/{wooferId}/attachment
          cors: true
          authorizer: Auth

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
    
    # TODO: Create a DynamoDB table with local secondary index and a composite key
    WoofersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        Properties:
        AttributeDefinitions:
          - AttributeName: dogId
            AttributeType: S
          - AttributeName: wooferId
            AttributeType: S
        KeySchema:
          - AttributeName: dogId
            KeyType: HASH
          - AttributeName: wooferId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.WOOFER_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.WOOFER_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: dogId
                KeyType: HASH
              - AttributeName: wooferId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    # TODO: Complete the bucket properties below. 
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: baikPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"
        Bucket: !Ref AttachmentsBucket